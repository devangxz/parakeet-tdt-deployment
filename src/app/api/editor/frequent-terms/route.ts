import { NextResponse } from 'next/server'

import logger from '@/lib/logger'
import prisma from '@/lib/prisma'

export async function GET(request: Request) {
    try {

        const userToken = request.headers.get('x-user-token')
        const user = JSON.parse(userToken ?? '{}')
        const userId = user?.userId

        if (!userId) {
            return NextResponse.json({ error: 'userId is required' }, { status: 400 })
        }

        const frequentTermsData = await prisma.frequentTerms.findUnique({
            where: { userId: Number(userId) },
            select: { autoGenerated: true, edited: true }
        })

        if (!frequentTermsData) {
            return NextResponse.json({ error: 'Frequent terms not found' }, { status: 404 })
        }

        logger.info(`frequent terms fetched successfully for ${userId}`)

        return NextResponse.json({
            autoGenerated: frequentTermsData.autoGenerated,
            edited: frequentTermsData.edited
        })
    } catch (error) {
        logger.error(error)
        return NextResponse.json({ error: 'Failed to get frequent terms' }, { status: 500 })
    }
}
