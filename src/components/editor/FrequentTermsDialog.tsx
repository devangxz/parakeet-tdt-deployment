import { ReloadIcon } from '@radix-ui/react-icons'
import { useState } from 'react'

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import { Input } from '@/components/ui/input'
import { ScrollArea } from '@/components/ui/scroll-area'

interface FrequentTermsDialogProps {
  frequentTermsModalOpen: boolean
  setFrequentTermsModalOpen: React.Dispatch<React.SetStateAction<boolean>>
  frequentTermsData: {
    autoGenerated: string
    edited: string
  }
  isFrequentTermsLoading: boolean
}

const FrequentTermsDialog = ({
  frequentTermsModalOpen,
  setFrequentTermsModalOpen,
  frequentTermsData,
  isFrequentTermsLoading,
}: FrequentTermsDialogProps) => {
  const [searchTerm, setSearchTerm] = useState('')

  const autoGeneratedTermsArray =
    frequentTermsData?.autoGenerated
      ?.split(',')
      .filter(Boolean)
      .map((term) => term.trim()) || []
  const editedTermsArray =
    frequentTermsData?.edited
      ?.split(',')
      .filter(Boolean)
      .map((term) => term.trim()) || []

  const filteredAutoGeneratedTerms = autoGeneratedTermsArray.filter((term) =>
    term.toLowerCase().includes(searchTerm.toLowerCase())
  )
  const filteredEditedTerms = editedTermsArray.filter((term) =>
    term.toLowerCase().includes(searchTerm.toLowerCase())
  )

  return (
    <Dialog
      open={frequentTermsModalOpen}
      onOpenChange={setFrequentTermsModalOpen}
    >
      <DialogContent className='p-0 gap-0'>
        <DialogHeader className='p-4'>
          <DialogTitle className='mb-4'>Frequent Terms</DialogTitle>
          <Input
            type='text'
            placeholder='Enter a term to lookup'
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className='h-7 md:w-1/2 self-center'
          />
        </DialogHeader>

        <div className='m-4 mt-1 rounded-md border px-4'>
          {isFrequentTermsLoading ? (
            <div className='flex justify-center items-center h-[70vh]'>
              <ReloadIcon className='h-4 w-4 animate-spin' />
              <span className='ml-2 text-sm text-muted-foreground'>
                Getting frequent terms...
              </span>
            </div>
          ) : (
            <ScrollArea className='h-[70vh]'>
              <div className='mt-2'>
                <h2 className='text-md font-medium text-foreground'>
                  Shortlisted:
                </h2>
                <div className='flex flex-wrap gap-2 mt-2'>
                  {filteredEditedTerms.length > 0 ? (
                    filteredEditedTerms.map((term, index) => (
                      <span
                        key={index}
                        className='inline-block py-1 px-2 bg-muted rounded text-sm shadow-sm text-foreground'
                      >
                        {term}
                      </span>
                    ))
                  ) : searchTerm ? (
                    <p className='text-sm text-muted-foreground'>
                      {`No shortlisted terms found for "${searchTerm}".`}
                    </p>
                  ) : (
                    <p className='text-sm text-muted-foreground'>
                      No shortlisted terms available.
                    </p>
                  )}
                </div>
              </div>
              <div className='mt-5 mb-2'>
                <h2 className='text-md font-medium text-foreground'>
                  Autogenerated:
                </h2>
                <div className='flex flex-wrap gap-2 mt-2'>
                  {filteredAutoGeneratedTerms.length > 0 ? (
                    filteredAutoGeneratedTerms.map((term, index) => (
                      <span
                        key={index}
                        className='inline-block py-1 px-2 bg-muted rounded text-sm shadow-sm text-foreground'
                      >
                        {term}
                      </span>
                    ))
                  ) : searchTerm ? (
                    <p className='text-sm text-muted-foreground'>
                      {`No autogenerated terms found for "${searchTerm}".`}
                    </p>
                  ) : (
                    <p className='text-sm text-muted-foreground'>
                      No autogenerated terms available.
                    </p>
                  )}
                </div>
              </div>
            </ScrollArea>
          )}
        </div>
      </DialogContent>
    </Dialog>
  )
}

export default FrequentTermsDialog
