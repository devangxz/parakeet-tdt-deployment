name: Deploy to Replicate

on:
  workflow_dispatch:
    inputs:
      model_name:
        description: 'Enter the model name (leave empty for default: devangxz/parakeet-tdt-0.6b-v2)'
        required: false
        default: 'devangxz/parakeet-tdt-0.6b-v2'
      force_rebuild:
        description: 'Force rebuild from scratch'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  MODEL_NAME: ${{ inputs.model_name || 'devangxz/parakeet-tdt-0.6b-v2' }}

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    outputs:
      model_name: ${{ env.MODEL_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate cog.yaml
        run: |
          if [ ! -f "cog.yaml" ]; then
            echo "‚ùå cog.yaml not found"
            exit 1
          fi
          echo "‚úÖ cog.yaml found"

      - name: Validate predict.py
        run: |
          if [ ! -f "predict.py" ]; then
            echo "‚ùå predict.py not found" 
            exit 1
          fi
          echo "‚úÖ predict.py found"

      - name: Check Docker compatibility
        run: |
          if [ -f "Dockerfile.replicate" ]; then
            echo "‚úÖ Dockerfile.replicate found"
            # Basic Dockerfile validation
            if ! grep -q "FROM.*pytorch" Dockerfile.replicate; then
              echo "‚ùå Invalid Dockerfile base image"
              exit 1
            fi
            echo "‚úÖ Dockerfile validation passed"
          fi

  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Free disk space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          docker-images: false
          large-packages: true

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Cog
        uses: replicate/setup-cog@v2

      - name: Build image locally
        run: |
          echo "üî® Building Cog image..."
          cog build --separate-weights
          echo "‚úÖ Build completed successfully"

      - name: Test prediction locally
        run: |
          echo "üß™ Testing local prediction..."
          # Create a simple test audio file (silence)
          python3 -c "
          import numpy as np
          import soundfile as sf
          silence = np.zeros(16000, dtype=np.float32)  # 1 second of silence at 16kHz
          sf.write('test_audio.wav', silence, 16000)
          "
          
          # Test the prediction
          echo "Testing basic transcription..."
          timeout 300 cog predict -i audio=@test_audio.wav || {
            echo "‚ùå Local prediction test failed"
            exit 1
          }
          echo "‚úÖ Local prediction test passed"

  deploy:
    name: Deploy to Replicate
    runs-on: ubuntu-latest
    needs: [validate, build_and_test]
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    environment: production
    steps:
      - name: Free disk space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          docker-images: false
          large-packages: true

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Cog
        uses: replicate/setup-cog@v2
        with:
          token: ${{ secrets.REPLICATE_CLI_AUTH_TOKEN }}

      - name: Build and Push to Replicate
        run: |
          echo "üöÄ Deploying to Replicate..."
          echo "Model name: ${{ env.MODEL_NAME }}"
          
          # Add retry logic for push
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts"
            
            if [ "${{ inputs.force_rebuild }}" == "true" ]; then
              echo "üîÑ Force rebuilding from scratch..."
              cog push r8.im/${{ env.MODEL_NAME }} --no-cache
            else
              echo "üöÄ Pushing with cache..."
              cog push r8.im/${{ env.MODEL_NAME }}
            fi
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ Successfully deployed to Replicate!"
              echo "üåê Model available at: https://replicate.com/${{ env.MODEL_NAME }}"
              break
            else
              echo "‚ùå Attempt $attempt failed"
              if [ $attempt -eq $max_attempts ]; then
                echo "‚ùå All attempts failed. Please check the logs."
                exit 1
              fi
              attempt=$((attempt + 1))
              echo "‚è≥ Waiting 30 seconds before retry..."
              sleep 30
            fi
          done

      - name: Post-deployment validation
        run: |
          echo "üîç Validating deployment..."
          # Wait a bit for the model to be ready
          sleep 60
          
          # You can add API calls here to test the deployed model
          echo "‚úÖ Deployment validation completed"
          echo "üìã Deployment Summary:"
          echo "   üè∑Ô∏è  Model: ${{ env.MODEL_NAME }}"
          echo "   üåê URL: https://replicate.com/${{ env.MODEL_NAME }}"
          echo "   üìù Commit: ${{ github.sha }}" 